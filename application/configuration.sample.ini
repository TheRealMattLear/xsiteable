[website]

; the main site parameters
name = 'xSiteable'

; uri used as prefix in links everywhere (no ending slashes, please)
uri  = '/xsiteable'

; a pipe-separated list of languages, ie. 'en|no|de' for English, Norwegian and German
language = 'en|no'

; default JQuery UI style (under /static/css)
style = 'smoothness'

; various display options
show-issues = ""
show-version = false
show-instance = false
show-user-debug = false
show-message = ""
show-logout = true

[pages]

; menu items
; URI                           = 'Title of page'
; URI:template                  = what template to run
; URI:iframe                    = put this new URI into an iframe (also sets URI:template
;                                 to 'iframe', unless overridden by explicitly set URI:template)
; URI:condition                 = what conditions in order to see this item
; URI:display                   = if condition fails; show 'disabled', or 'hide', default is 'hide'

main                  = 'Home'
main/news             = 'News'
main/forum            = 'Forum'
main/workspaces       = 'Workspaces'
main/admin            = 'Admin'
main/admin:weight     = 999
main/admin:condition  = 'role=admin'

[admin]

; The default admin user
;username = 'admin'
;password = 'admin'
;email = 'admin@somewhere.org'

; Where should we send emails of reported various issues?
issues_email = 'admin@somewhere.org'

[website_iframes]

; First iframe website
; s1.label = 'My Website'
; s1.uri = 'http://some.site/'
; s1.condition = 'group=Some Function Group'

; Second iframe website
; s2.label = 'Another Website'
; s2.uri = 'http://some.other.site/'

[framework]

; security model; open (default, everything is accessible, but restricted by rules)
; or closed (meaning, everything is restricted, access opened by rules)
security_model = open

; our website URI template (don't change unless you're hardcore)
uri_template = '{concept}/{section}/{id}/{selector}/{specific}/{atom}'

; Date format ; used for actual date representation, including in databases,
; and is  not the display format (it is meant for OS compatibility)
date_format = 'Y-m-d H:i:s'

; temporary directory, for storing cache files
cache_directory = './cache'

; default cache value (just a silly, simple minimum cache time)
cache_default = '+5 minutes'

; Display dates in a human-friendly way?
date_human = true

; if topics and entries in the database are date/time and / or username free,
; should we try to automatically fill them out?
auto_signing = true

; use aliases for known types?
; (important with old data based on previous versions)
type_alias = true

[statistics_plugin]
; a controller for various bits of statistics. Uses the in-built caching to
; store and retreive processed data for various statistical purposes, including
; (but not limited to) drawing graphs and creating reports.

; directory for storing timed stats files
directory = './stats'


[dms]
; Document Management System
enabled = false

; source and destination folders are OS paths
source_folder       = '/path/to/source/files'
destination_folder  = '/path/to/destination/static/docs'

; have we got sources copied in from other places/ List those here
additional_source_folder[] = '/path/to/source/files'

; should we convert absolute paths found in additional places to
; the current source folder?
convert_additional_to_source = true

; the URI (web access) to the destination folder
destination_uri     = 'http://localhost/xsiteable/static/docs'

; archive; are we to backup and version documents?
;   false = no versioning
;   true  = version all files
;   controlled = only version controlled documents
archive             = controlled

; default for all documents. Each document can be further configured individually
publish_in_pdf_format = true

; supported file formats
file_formats = pdf,doc,dot,docx,dotx,xls,xlt,xlsx,xlst,ppt,pptx,ods,png,jpg,gif


; generators for HTML versions (for preview and harvesting). Supported variables are;
;   {$uid}        Just the unique ID of the file to be converted (no extensions, no paths)
;   {$from}       The full path and name of file to convert
;   {$from_link}  Web access link of the HTML file we just created (handy in scripts)
;   {$to}         The full name for the HTML file to convert to
;   {$to_path}    The path only to where the HTML files go

pdf.create_view = 'pdftohtml -noframes -l 5 -c "{$from}" "{$to}"'
pdf.create_html = 'pdftohtml -noframes -l 5 -c "{$from}" "{$to}"'
;pdf.create_view = ''
;pdf.create_html = ''
;pdf.create_html = 'pdftohtml -noframes -i "{$from}" "{$to}"'
pdf.icon        = 'pdf-icon.png'


;doc.create_html = 'soffice --headless --convert-to htm:HTML --outdir {$to_path} {$from}; mv -f {$to_path}/{$uid}.htm {$to_path}/{$uid}.html;'
doc.create_html = ''
doc.icon        = 'word-icon.png'
dot.create_html = ''
dot.icon        = 'word-icon.png'
docx.create_html = ''
docx.icon        = 'word-icon.png'
dotx.create_html = ''
dotx.icon        = 'word-icon.png'

;xls.create_html = 'soffice --headless --convert-to htm --outdir {$to_path} {$from}; mv -f {$to_path}/{$uid}.htm {$to_path}/{$uid}.html;'
xls.create_html = ''
xls.icon        = 'excel-icon.png'
xlt.create_html = ''
xlt.icon        = 'excel-icon.png'
xlsx.create_html = ''
xlsx.icon        = 'excel-icon.png'
xltx.create_html = ''
xltx.icon        = 'excel-icon.png'

ppt.create_html = ''
ppt.icon        = 'powerpoint-icon.png'
pptx.create_html = ''
pptx.icon        = 'powerpoint-icon.png'

;ods.create_html = 'soffice --headless --convert-to htm --outdir {$to_path} {$from}; mv -f {$to_path}/{$uid}.htm {$to_path}/{$uid}.html;'
ods.create_html = ''
ods.icon        = '24x24/mimetypes/document.png'

png.create_html = 'php:create_image_wrapper ( "{$from_link}", "{$to}" )'
png.icon        = '24x24/mimetypes/image.png'

jpg.create_html = 'php:create_image_wrapper ( "{$from_link}", "{$to}" )'
jpg.icon        = '24x24/mimetypes/image.png'

gif.create_html = 'php:create_image_wrapper ( "{$from_link}", "{$to}" )'
gif.icon        = '24x24/mimetypes/image.png'

[database]
; uses PDO dsn, username and password
dsn        = 'mysql:host=localhost;dbname=xsiteable'
username   = 'user'
password   = 'pass'

[statistics_plugin]
; a controller for various bits of statistics. Uses the in-built caching to
; store and retreive processed data for various statistical purposes, including
; (but not limited to) drawing graphs and creating reports.

; directory for storing timed stats files
directory = './stats'

[user_management]

; should we use NTLM (automatic AD over LDAP) authentication?
NTLM = false

; Should we use a development model, with a list of various users with different roles?
DEV = false
; authentication datasources to use
; check = check for existance of user, authenticate = also authenticate
service['xs_config'] = 'check'               ; configuration file checker
service['xs'] = 'check|authenticate'         ; Internal xSiteable database
service['ad_ldap'] = 'check'                 ; Active Directory

; if a users email isn't in the database, create one with their username and this domain
profile_email_domain = 'localhost'

; Hard-code a couple of default users. You can completely kill these, or use ; them for always having a basic account to do administration. Also, don't ; call the main administrator 'admin' or 'root' for security reasons; rather, ; try to be inventive, like 'godzilla' or 'mamabear' or something. Just sayin'
user/admin:name = 'Administrator'
user/admin:password = 'admin'
user/admin:role = *
user/admin:group = *
user/admin:function = *

user/user1:name = 'User One'
user/user1:password = 'user1'
user/user1:role = User
;user/admin:group = *
;user/admin:function = *

[ad]
; Active Directory setting, if we're using it
active = false
username = 'username'
password = 'password'
base_dn = 'DC=domain,DC=local'
account_suffix = '@domain.local'
domain_controllers = 'ctrl1', 'ctrl2'

[user_security_mapping]

;role.